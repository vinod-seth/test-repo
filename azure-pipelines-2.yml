# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

parameters:
- name: foo
  type: object
  default: []
- name: myStringName
  type: string
  default: a string value
- name: myMultiString
  type: string
  default: default
  values:
  - default
  - ubuntu
- name: myNumber
  type: number
  default: 2
  values:
  - 1
  - 2
  - 4
  - 8
  - 16
- name: myBoolean
  type: boolean
  default: true
- name: image
  displayName: 'Pool image'
  default: ubuntu-latest
  values:
  - windows-latest
  - vs2017-win2016
  - ubuntu-latest
  - ubuntu-16.04
  - macOS-latest
  - macOS-10.14
- name: test
  displayName: Run Tests?
  type: boolean
  default: true
- name: configs
  type: string
  default: 'x86,x64'

variables:
- group: testgroup
- name: my-passed-variable
  value: $[variables.test] 
pool:
  vmImage: ubuntu-latest

steps:
# - template: azure-pipelines-1.yml
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      
      Write-Host $(System.DefaultWorkingDirectory)
      Write-Host $(Build.ArtifactStagingDirectory)
      Write-Host "$env:SYSTEM_ACCESSTOKEN = $(System.AccessToken)"
      Write-Host $(Pipeline.Workspace)
      Write-Host $(my-passed-variable)
      Write-Host $(test)
- script: |
    echo "Hello, world!"
    echo "Pool image: ${{ parameters.image }}"
    echo "Run tests? ${{ parameters.test }}"
  displayName: 'Show runtime parameter values'

- bash: echo This script could use $SYSTEM_ACCESSTOKEN
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
- powershell: | 
    Write-Host "This is a script that could use $env:SYSTEM_ACCESSTOKEN"
    Write-Host "$env:SYSTEM_ACCESSTOKEN = $(System.AccessToken)"
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
- script: echo building $(Build.BuildNumber) with ${{ parameters.image }}
- script: echo building $(Build.BuildNumber)
##############################################################
#Use conditionals with parameters
##############################################################
- ${{ if eq(parameters.test, true) }}:
    - script: echo "Running all the tests"

##############################################################
# Use parameters to set what configuration is used
##############################################################
- ${{ if contains(parameters.configs, 'x86') }}:
    - script: echo Building x86...
- ${{ if contains(parameters.configs, 'x64') }}:
    - script: echo Building x64...
- ${{ if contains(parameters.configs, 'arm') }}:
    - script: echo Building arm...
##############################################################
# Loop through parameters
##############################################################
# - ${{ each parameter in parameters }}:
#   - script: echo ${{ parameter.Key }} 
#   - script: echo ${{ parameter.Value }}
##############################################################
#   Check for an empty parameter object
##############################################################
# - ${{ if eq(length(parameters.foo), 0) }}:
#   - script: echo Foo is empty
#     displayName: Foo is empty

##############################################################
# Loop through parameters and print if iys not empty
##############################################################
# - ${{ each parameter in parameters }}:
#   - ${{ if eq(length(parameter.value), 0) }}:
#     - script: echo ${{ parameter.Key }} is empty
# - script: echo ${{ parameter.Key }} 
# - script: echo ${{ parameter.Value }}

- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop1
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop2